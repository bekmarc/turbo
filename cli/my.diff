diff --git a/cli/internal/filewatcher/backend.go b/cli/internal/filewatcher/backend.go
index b8b7fa801..55b8e1d48 100644
--- a/cli/internal/filewatcher/backend.go
+++ b/cli/internal/filewatcher/backend.go
@@ -74,15 +74,17 @@ func (f *fsNotifyBackend) onFileAdded(name turbopath.AbsoluteSystemPath) error {
 		}
 		return errors.Wrapf(err, "error checking lstat of new file %v", name)
 	}
-	if info.IsDir() {
+	if info.Mode()&os.ModeSymlink > 0 {
+		// do nothing for symlinks
+	} else if info.IsDir() {
 		// If a directory has been added, we need to synthesize events for everything it contains
 		if err := f.watchRecursively(name, []string{}, synthesizeEvents); err != nil {
 			return errors.Wrapf(err, "failed recursive watch of %v", name)
 		}
 	} else {
-		if err := f.watcher.Add(name.ToString()); err != nil {
-			return errors.Wrapf(err, "failed adding watch to %v", name)
-		}
+		// if err := f.watcher.Add(name.ToString()); err != nil {
+		// 	return errors.Wrapf(err, "failed adding watch to %v", name)
+		// }
 	}
 	return nil
 }
@@ -137,6 +139,13 @@ outer:
 					f.errors <- err
 				}
 			}
+			if eventType == FileRenamed {
+				// synthesize a delete event for a rename
+				f.events <- Event{
+					Path:      path,
+					EventType: FileDeleted,
+				}
+			}
 			f.events <- Event{
 				Path:      path,
 				EventType: eventType,
diff --git a/cli/internal/filewatcher/filewatcher_test.go b/cli/internal/filewatcher/filewatcher_test.go
index 86a79d050..7262f6b66 100644
--- a/cli/internal/filewatcher/filewatcher_test.go
+++ b/cli/internal/filewatcher/filewatcher_test.go
@@ -232,7 +232,7 @@ func TestFileWatchingSubfolderDeletion(t *testing.T) {
 // we get a deleted event at the root.
 //
 // ✅ macOS
-// ❌ Linux - we do not get an event when the root is recreated L287
+// ✅ Linux
 // ❌ Windows - we do not get an event when the root is recreated L287
 func TestFileWatchingRootDeletion(t *testing.T) {
 	logger := hclog.Default()
@@ -286,7 +286,7 @@ func TestFileWatchingRootDeletion(t *testing.T) {
 // file watching will continue, and a rename event will be sent.
 //
 // ✅ macOS
-// ❌ Linux - renaming generates file creation events of the new folder (and all the subcontents), not a rename
+// ✅ Linux
 // ❌ Windows - you cannot rename a watched folder (see https://github.com/fsnotify/fsnotify/issues/356)
 func TestFileWatchingSubfolderRename(t *testing.T) {
 	logger := hclog.Default()
@@ -406,7 +406,7 @@ func TestFileWatchingRootRename(t *testing.T) {
 // be watched, and raise events with the original path.
 //
 // ✅ macOS
-// ❌ Linux - L493 fails because symlinks do not produce events
+// ✅ Linux
 // ✅ Windows - requires admin permissions
 func TestFileWatchSymlinkCreate(t *testing.T) {
 	logger := hclog.Default()
